<?xml version="1.0"?>
  <database name="FUNCTION GAS_ASSET_POSSITION_POST">
    <function name="GAS_ASSET_POSSITION_POST" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_ResultStr VARCHAR2(2000):='';
v_Record_ID VARCHAR2(32);
v_AD_User_ID VARCHAR2(32);
V_MASTERDEPARTEMENTID VARCHAR(32);
V_GAHHISTORICALASSET VARCHAR(32);
v_User VARCHAR2(32);

 TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  
BEGIN
BEGIN
  IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date, i.UpdatedBy
                            FROM AD_PINSTANCE i LEFT JOIN AD_PINSTANCE_PARA p ON i.AD_PInstance_ID=p.AD_PInstance_ID
                            WHERE i.AD_PInstance_ID=p_PInstance_ID
                            ORDER BY p.SeqNo) 
      LOOP
        IF (Cur_Parameter.ParameterName = 'master_departement_id') THEN
          V_MASTERDEPARTEMENTID := Cur_Parameter.P_String;
          DBMS_OUTPUT.PUT_LINE('  master_departement_id=' || V_MASTERDEPARTEMENTID) ;
        END IF;
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
        
        UPDATE A_ASSET SET EM_GMM_MASTER_DEPARTMENT_ID = V_MASTERDEPARTEMENTID 
        WHERE A_ASSET_ID = v_Record_ID;  
      END LOOP;  
        FOR CUR_HISTORICAL_ASSET IN
      (
        SELECT AA.A_ASSET_ID, AA.AD_CLIENT_ID, AA.AD_ORG_ID, AA.ISACTIVE, AA.CREATED, AA.CREATEDBY, AA.UPDATED, AA.UPDATEDBY,
        GMD.GMM_MASTER_DEPARTMENT_ID
        FROM GMM_MASTER_DEPARTMENT GMD ,A_ASSET AA
        WHERE  AA.EM_GMM_MASTER_DEPARTMENT_ID= GMD.GMM_MASTER_DEPARTMENT_ID
        AND AA.A_ASSET_ID = v_Record_ID
      )
    LOOP
    --DBMS_OUTPUT.PUT_LINE('kkkk ' || v_Record_ID) ;
     Ad_Sequence_Next('GAS_HISTORICAL_ASSET', CUR_HISTORICAL_ASSET.AD_CLIENT_ID, V_GAHHISTORICALASSET);
     
      INSERT INTO GAS_HISTORICAL_ASSET(GAS_HISTORICAL_ASSET_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, CREATED, 
            CREATEDBY, UPDATED, UPDATEDBY,         
            MOVEMENTDATE, EM_GMM_MASTER_DEPARTMENT_ID, A_ASSET_ID)
            
      VALUES (V_GAHHISTORICALASSET, CUR_HISTORICAL_ASSET.AD_CLIENT_ID,  CUR_HISTORICAL_ASSET.AD_ORG_ID, 'Y', TO_DATE(NOW()), 
            v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID, 
            TO_DATE(NOW()), CUR_HISTORICAL_ASSET.GMM_MASTER_DEPARTMENT_ID, CUR_HISTORICAL_ASSET.A_ASSET_ID)
            ;  
      END LOOP;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, V_AD_User_ID, 'Y', 1, '@Success@');
  END IF;
  --RETURN;
END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
END GAS_ASSET_POSSITION_POST]]></body>
    </function>
  </database>
